---
v: 3

title: Clarification and enhancement of RFC7030 CSR Attributes definition
abbrev: CSRAttrs
docname: draft-ietf-lamps-rfc7030-csrattrs-16

stand_alone: true

ipr: trust200902
submissionType: IETF
area: Internet
wg: LAMPS Working Group
kw: Internet-Draft
cat: std
updates: 7030

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca
  role: editor
- ins: O. Friel
  name: Owen Friel
  org: Cisco
  email: ofriel@cisco.com
- ins: D. von Oheimb
  name: Dr. David von Oheimb
  org: Siemens
  email: dev@ddvo.net
- ins: D. Harkins
  name: Dan Harkins
  org: The Industrial Lounge
  email: dharkins@lounge.org

normative:
  RFC5911:
  RFC5912:
  RFC6268:
  RFC7030:
  X.680:
    target: https://www.itu.int/rec/T-REC-X.680
    title: >
      Information technology --
      Abstract Syntax Notation One (ASN.1):
      Specification of basic notation
    author:
    - org: ITU-T
    date: 2021-02
    seriesinfo:
      ITU-T Recommendation: X.680
      ISO/IEC: 8824-1:2021

informative:
  RFC2985:
  RFC4211:
  RFC5272:
  RFC5280:
  RFC8295:
  RFC8368:
  RFC8994: ACP
  RFC8995: BRSKI
  RFC9480:
  RFC9483:
  dumpasn1:
    target: "https://www.cs.auckland.ac.nz/~pgut001/dumpasn1.c"
    title: "Dump ASN"
    author:
    - name: "Peter Gutmann"

  favoritedrink:
    target: "https://oid-base.com/get/0.9.2342.19200300.100.1.5"
    title: "Favorite Drink: arbitrary OID"

  X.690:
    target: https://www.itu.int/rec/T-REC-X.690
    title: >
      Information technology --
      ASN.1 encoding rules: Specification of Basic Encoding Rules (BER),
      Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)
    author:
    - org: ITU-T
    date: 2021-02
    seriesinfo:
      ITU-T Recommendation: X.690
      ISO/IEC: 8825-1:2021

--- abstract

This document updates RFC7030 (EST) and clarifies
how the CSR Attributes Response can be used by an EST server to specify
both CSR attribute OIDs and also CSR attribute values,
in particular X.509 extension values,
that the server expects the client to include in subsequent CSR request.

The Enrollment over Secure Transport (EST, RFC7030) is ambiguous in its specification of the CSR Attributes Response. This has resulted in implementation challenges and implementor confusion.
As a result of some of the implementation challenges, it came to light that the particular way of that RFC7030 (EST) says to use the CSR attributes was not universally agreed upon.

This document therefore also provides a new straightforward approach: using
a template for CSR contents that may be partially filled in by the server.
This also allows an EST server to specify a subject Distinguished Name (DN).

--- middle

# Introduction

This document updates RFC7030 (EST) and clarifies
how the CSR Attributes Response can be used by an EST server to specify
both CSR attribute OIDs and also CSR attribute values,
in particular X.509 extension values,
that the server expects the client to include in subsequent CSR request.

Enrollment over Secure Transport {{RFC7030}} (EST) has been used in a wide variety of applications.
In particular, {{RFC8994}} and {{RFC8995}} describe a way to use it in order to build out an autonomic control plane (ACP) {{RFC8368}}.

The ACP requires that each node be given a very specific subjectAltName.
In the ACP specification, the solution was for the EST server to use
section 2.6 of {{RFC7030}} to convey to the EST client
the actual subjectAltName that will end up in its certificate.

As a result of some implementation challenges, it came to light that this particular way of using the CSR attributes was not universally agreed upon, and it was suggested that it went contrary to section 2.6.

Section 2.6 says that the CSR attributes "can provide additional
descriptive information that the EST server cannot access itself".
This is extended to describe how the EST server can provide values that it demands to use.

After significant discussion, it has been determined that
{{Section 4.5 of RFC7030}} specification is sufficiently difficult
to read and ambiguous to interpret that clarification is needed.

This document motivates the different use cases, and provides additional worked out examples.

Also, section 4.5.2 is extended to clarify the use of the existing ASN.1 syntax {{X.680}}{{X.690}}.
This covers all uses and is fully backward compatible with existing use.

# Terminology

{::boilerplate bcp14}

# CSR Attributes Handling

## Extensions to RFC 7030 section 2.6

Replace the second paragraph with the following text:

~~~~
   These attributes can provide additional descriptive information that
   the EST server cannot access itself, such as the Media Access Control
   (MAC) address of an interface of the EST client. The EST server can
   also provide concrete values that it tells the client to include in
   the CSR, such as a specific X.509 Subject Alternative Name extension.
   Moreover, these attributes can indicate the type of the included
   public key or which crypto algorithms to use for the self-signature,
   such as a specific elliptic curve or a specific hash function that
   the client is expected to use when generating the CSR.
~~~~

## Extensions to RFC 7030 section 4.5.2 {#csrattrs}

The ASN.1 syntax for CSR Attributes as defined in EST {{RFC7030, Section 4.5.2}} is as follows:

~~~
   CsrAttrs ::= SEQUENCE SIZE (0..MAX) OF AttrOrOID

   AttrOrOID ::= CHOICE (oid OBJECT IDENTIFIER, attribute Attribute }

   Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
        type   ATTRIBUTE.&id({IOSet}),
        values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type}) }
~~~

This remains unchanged, such that bits-on-the-wire compatibility is maintained.

Key parts that were unclear were which OID to use in the 'type' field and
that the 'values' field can contain an entire sequence of X.509 extensions.

The OID to use for such attributes in the 'type' field MUST be `id-ExtensionReq`,
which has the value 1.2.840.113549.1.9.14.
Note that is the same as `pkcs-9-at-extensionRequest` defined in PKCS#9 {{RFC2985}}.
There MUST be only one such attribute.

The `values` field of this attribute MUST contain a set with exactly one element,
and this element MUST be of type `Extensions`, as per {{Section 4.1 of RFC5280}}:

~~~
   Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

   Extension  ::=  SEQUENCE  {
        extnID      OBJECT IDENTIFIER,
        critical    BOOLEAN DEFAULT FALSE,
        extnValue   OCTET STRING
                    -- contains the DER encoding of an ASN.1 value
                    -- corresponding to the extension type identified
                    -- by extnID
        }
~~~

An Extension comprises the OID of the specific X.509 extension (extnID),
optionally the 'critical' bit, and the extension value (extnValue).

An Extensions structure, which is a sequence of elements of type Extension,
MUST NOT include more than one element with a particular extnID.

With this understanding, the needs of {{RFC8994}} and {{RFC8995}} are satisfied
with no change to the bits on the wire.

## Use of CSR templates {#csrtemplate}

Alternatively to the unstructured inclusion of CSR attributes
specified in {{RFC7030, Section 4.5.2}} with its limitations and ambiguities,
{{Appendix B of RFC8295}} describes an approach using a CSR template.
An entire CSR object is returned with various fields filled out,
and other fields waiting to be filled in.
In that approach, a pKCS7PDU attribute includes a Full PKI Data content type {{RFC5272}}
and that in turn includes a CSR or CRMF formatted request
(for details see {{RFC6268}} Sections 5 or 9, respectively).<br>
One drawback to that approach, particularly for the CSR, is that some useless
fields have to be included; specifically, the `signature` field on
the CSR is faked with an empty bit string.

A similar method has been defined in CMP Updates {{RFC9480}}
and the Lightweight CMP profile {{RFC9483, Section 4.3.3}},
using a CSR template as defined for CRMF {{RFC4211}}.
Like the approach mentioned before,
this method does not properly deal with absent RDNs (encoding them as empty strings),
absent `subjectPublicKey` fields (encoding them as empty `BIT STRING`),
and absent X.509v3 extension values (encoding them as empty `OCTET STRING`),
which may cause issues with strict ASN.1 parsing and decoding.

We avoid these drawbacks as follows.

This specification defines a new Certificate Request Information Template attribute
for CsrAttrs (as given in {{csrattrs}}) that is essentially
a partially filled in PKCS#10 CSR minus the signature wrapper:

~~~~
  CertificationRequestInfoTemplate ::= SEQUENCE {
      version       INTEGER { v1(0) } (v1, ... ),
      subject       NameTemplate OPTIONAL,
      subjectPKInfo [0] SubjectPublicKeyInfoTemplate
                                {{ PKInfoAlgorithms }} OPTIONAL,
      attributes    [1] Attributes{{ CRIAttributes }}
  }
~~~~

{{app-asn1-module}} contains all detail.

The CertificationRequestInfoTemplate closely resembles the CertificationRequestInfo
from {{RFC5912, Section 5}}:

~~~~
  CertificationRequestInfo ::= SEQUENCE {
    version       INTEGER { v1(0) } (v1,...),
    subject       Name,
    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
    attributes    [0] Attributes{{ CRIAttributes }}
  }
~~~~

with the following differences.

* The `subject` field has been made `OPTIONAL`.
It MUST be present if the server places any requirements on the RDNs of the subject name;
otherwise it MUST be absent.

* RelativeDistinguishedNames (RDNs) in the `subject` fields are allowed to have no value,
which has been achieved by adding `OPTIONAL` to the `value` field of `SingleAttributeTemplate`.
If the client is expected to provide an RDN of a certain type such as `commonName`,
the respective RDN MUST be present in the `subject` field; otherwise it MUST be absent.
If the RDN value is present, this means that the client is required to use the given value
for the RDN, otherwise the client is expected to fill in the value.

~~~~
  SingleAttributeTemplate {ATTRIBUTE:AttrSet} ::= SEQUENCE {
      type      ATTRIBUTE.&id({AttrSet}),
      value     ATTRIBUTE.&Type({AttrSet}{@type}) OPTIONAL
  }

~~~~

* The `subjectPKInfo` field has been made `OPTIONAL`.
The field MUST be absent if the server places no requirements on the key.
Otherwise it MUST be present, and the `algorithm` field
specifies the type of the key pair the client is expected to use.

* The `subjectPublicKey` field contained in `SubjectPublicKeyInfoTemplate`
has been made `OPTIONAL` because usually it is not needed.
In case the server requires use of an RSA key and needs to specify its size, the field
MUST be present and contain a dummy public key value of the desired RSA modulus length.
Otherwise, the `subjectPublicKey` MUST be absent.

~~~~
  SubjectPublicKeyInfoTemplate{PUBLIC-KEY:IOSet} ::= SEQUENCE {
      algorithm        AlgorithmIdentifier{PUBLIC-KEY, {IOSet}},
      subjectPublicKey BIT STRING OPTIONAL
  }
~~~~

* A new OID `id-aa-extensionReqTemplate` and the related `ExtensionOrIdTemplate` structure
is defined where the `extnValue` field has been made `OPTIONAL`.
This is only needed to enable specifying partial extensions with values to be filled in
by the client; otherwise the `id-ExtensionReq` OID and the respective value of type
`ExtensionReq` MUST be used.<br>
For each extension of type `Extension` or `ExtensionIdOrTemplate` provided by the server,
the client is expected to include an extension of the type given by the `extnID`.
If the `critical` field is present, the client is expected to use the given value.
If the `extnValue` is present (which is always the case when type `Extension` is used),
the client is required to use the given extension value.
Otherwise it is expected to fill in the extension value.<br>
If the subjectAltName extension contains the `directoryName` choice containing the `NULL-DN`
(i.e., an empty sequence of RDNs) or the `iPAddress` choice with an empty `OCTET STRING`,
this means that the client is expected to fill in the respective `GeneralName` value.

~~~~
   ExtensionIdOrTemplate{EXTENSION:ExtensionSet} ::= CHOICE {
     extnID   EXTENSION.&id({ExtensionSet}),
     template SEQUENCE {
       extnID    EXTENSION.&id({ExtensionSet}),
       critical  BOOLEAN
     --                 (EXTENSION.&Critical({ExtensionSet}{@extnID}))
                        DEFAULT FALSE,
       extnValue OCTET STRING (CONTAINING
                 EXTENSION.&ExtnType({ExtensionSet}{@extnID})) OPTIONAL
                 --  contains the DER encoding of the ASN.1 value
                 --  corresponding to the extension type identified
                 --  by extnID when present
   }
~~~~

The `version` field of the `CertificationRequestInfoTemplate` MUST contain v1 (0).

The `attributes` field MUST NOT contain multiple `at-extensionReqTemplate` attributes
and MUST NOT contain both `extensionRequest` and `at-extensionReqTemplate` attributes.

<!--
Each of the attributes has a single attribute value instance in the
values set.  Even though the syntax is defined as a set, there MUST
be exactly one instance of AttributeValue present.
-->

Suppose the server requires that the CSR will contain:

*  the subject field with a common name to be filled in by the EE and
   two organizational unit fields with given values "myDept" and "myGroup",

*  the publicKey field contains an
   Elliptic Curve Cryptography (ECC) key on curve secp256r1,

*  the subjectAltName extension
   with DNS name "www.myServer.com" and an empty IP address to be filled in,

*  the keyUsage extension marked critical
   with the value digitalSignature and keyAgreement, and

*  the extKeyUsage extension with value to be filled in by the EE.


Then the `CertificationRequestInfo` structure constructed by the server
will be as follows:

~~~
{::include examples/template.txt}
~~~


# Co-existence with existing implementations

Legacy servers MAY continue to use the {{RFC7030}}-style unstructured list of attribute/value pairs,
and MAY also include the template style described in {#csrtemplate}.
Clients which understand both MUST use the template only, and
ignore all other CSRattrs elements.
Older clients will ignore the new CertificationRequestInfoTemplate element.

# Examples

Each example has a high-level (English) explanation of what is expected.
Some mapping back to the Attribute and Extension definitions above are included.
The base64 DER encoding is then shown.
The output of "dumpasn1" {{dumpasn1}} is then provided to detail what the contents are.

## RFC8994/ACP subjectAltName with specific otherName {#acpNodeName}

A single subjectAltName extension is specified in a single {{RFC7030}} CsrAttrs Extension attribute.
This is what might be created by an {{RFC8995}} Registrar that is asking for {{RFC8994}} AcpNodeName format otherNames.

### Base64 encoded example

The Base64:

~~~~ base64
{::include examples/realistic-acp.csrattr.b64}
~~~~
{: sourcecode-markers="false" sourcecode-name="realistic-acp.csrattr”}

### ASN.1 DUMP output

There is a single subjectAltName Extension with an Attribute with Extension type.

~~~~
{::include examples/realistic-acp.csrattr.dump}
~~~~

## RFC7030 original example

In this example, taken from {{RFC7030, Section 4.5.2}}, a few different attributes are included in the extensionRequest.

### Base64 encoded example

The Base64:

~~~~ base64
{::include examples/rfc7030-example01.csrattr.b64}
~~~~
{: sourcecode-markers="false" sourcecode-name="rfc7030-example01.csrattr”}

### ASN.1 DUMP output

1. The challengePassword attribute is included to indicate that the CSR should include this value.

2. An ecPublicKey attribute is provided with the value secp384r1 to indicate what kind of key should be submitted.

3. An extensionRequest container with an OID 1.3.6.1.1.1.1.22 (macAddress), but without a value, to indicate that the CSR should include an X.509v3 extension with this value.

4. The ecdsaWithSHA384 OID is included to indicate what kind of hash is expected to be used for the self-signature of the PKCS#10 CSR structure.

~~~~
{::include examples/rfc7030-example01.csrattr.dump}
~~~~

## EST server requires a specific subjectAltName extension

This example is the same as the previous one except that instead of the OID
for a macAddress, a subjectAltName is specified as the only Extension element.

### Base64 encoded example

The Base64:

~~~~ base64
{::include examples/potato-example.csrattr.b64}
~~~~
{: sourcecode-markers="false" sourcecode-name="rfc7030-example01.csrattr”}

### ASN.1 DUMP output

1. The challengePassword attribute is included to indicate that the CSR should include this value.

2. An ecPublicKey attribute is provided with the value secp384r1 to indicate what kind of key should be submitted.

3. An extensionRequest container with a subjectAltName value containing the name potato@example.com

4. The ecdsaWithSHA384 OID is included to indicate what kind of hash is expected to be used for the self-signature of the PKCS#10 CSR structure.

~~~~
{::include examples/potato-example.csrattr.dump}
~~~~

## Require a public key of a specific size

The CSR requires a public key of a specific size

### Base64 encoded example

The Base64:

~~~~ base64
{::include examples/harkins01.csrattr.b64}
~~~~
{: sourcecode-markers="false" sourcecode-name="harkins01.csrattr”}

### ASN.1 DUMP output

Provide a CSR with an RSA key that's 4096 bits and use SHA256 as the hash algorithm within the signature.

~~~~
{::include examples/harkins01.csrattr.dump}
~~~~

## Require a public key of a specific curve

The CSR requires a public key with a specific curve


### Base64 encoded example

The Base64:

~~~~ base64
{::include examples/harkins02.csrattr.b64}
~~~~
{: sourcecode-markers="false" sourcecode-name="harkins02.csrattr”}

### ASN.1 DUMP output

Provide a CSR with an ECC key from p384, include your serial number, and
use SHA384 as the hash algorithm within the signature.

~~~~
{::include examples/harkins02.csrattr.dump}
~~~~

## Require a specific extension

The CSR is required to have an EC key, to include a serial number,
a friendly name, favorite drink {{favoritedrink}} [OID 0.9.2342.19200300.100.1.5], and
use SHA512 as the hash algorithm within the signature.

### Base64 encoded example

The Base64:

~~~~ base64
{::include examples/harkins03.csrattr.b64}
~~~~
{: sourcecode-markers="false" sourcecode-name="harkins03.csrattr”}

### ASN.1 DUMP output

Provide a CSR with an EC key from sha521, include your serial number,
friendly name, and favorite drink, and hash it with SHA512

~~~~
{::include examples/harkins03.csrattr.dump}
~~~~

# Security Considerations

The security considerations from EST {{RFC7030}} section 6 are unchanged.

## Identity and Privacy Considerations

An EST server may use this mechanism to instruct the EST client about the identities it should include in the CSR it sends as part of enrollment.
The client may only be aware of its IDevID Subject, which includes a manufacturer serial number.
The EST server can use this mechanism to tell the client to include a specific fully qualified domain name in the CSR in order to complete domain ownership proofs required by the CA.
Additionally, the EST server may deem the manufacturer serial number in an IDevID as personally identifiable information, and may want to specify a new random opaque identifier that the pledge should use in its CSR.
This may be desirable if the CA and EST server have different operators.

# IANA Considerations

IANA is asked to allocate two new Object Identifiers:

* One (TBD1) from the SMI Security for S/MIME Module Identifier
  (1.2.840.113549.1.9.16.0) registry for the ASN.1 module: id-mod-critemplate; see {{app-asn1-module}}
* One (TBD2) from the SMI Security for S/MIME Attributes
  (1.2.840.113549.1.9.16.2) registry for the Certification Request
  Information Template (csrinfo) attribute; see {{app-asn1-module}}
* One (TBD3) SMI Security for S/MIME Attributes
  (1.2.840.113549.1.9.16.2) registry for the extension request
  template (extensionReqTemplate) attribute; see Appendix A

# Acknowledgments

Corey Bonnell crafted example02 using a different tool, and this helped debug other running code.

Carl Wallace provided major parts of the CertificationRequestInfoTemplate syntax declaration.

Russ Housley did many reviews of the ASN.1 and suggested many fixes.

Deb Cooley did the usual Area Director Review.

--- back

# ASN.1 Module {#app-asn1-module}

<aside markdown="block">
RFC EDITOR: Please replace TBD1, TBD2, and TBD3 with the value assigned by IANA
during the publication of this document.
</aside>

This appendix provides an ASN.1 module {{X.680}} for the Certification
Request Information Template attribute, and it follows the conventions
established in {{RFC5911}}, {{RFC5912}}, and {{RFC6268}}.

~~~~ asn.1
{::include CRITemplateModule.asn}
~~~~

<!--
Local IspellDict: american
LocalWords:  abbrev CSRAttrs docname ietf rfc csrattrs ipr wg pkcs
LocalWords:  submissionType kw std toc sortrefs symrefs org mcr
LocalWords:  seriesinfo bcp crypto CsrAttrs AttrOrOID IOSet asn
LocalWords:  csrtemplate pKCS CertificationRequestInfoTemplate
LocalWords:  NameTemplate subjectPKInfo PKInfoAlgorithms br acp
LocalWords:  SubjectPublicKeyInfoTemplate AttrSet ExtensionSet
LocalWords:  SingleAttributeTemplate extensionReqTemplate secp
LocalWords:  ExtensionOrIdTemplate ExtnType myDept myGroup CSRattrs
LocalWords:  publicKey dumpasn otherName acpNodeName otherNames
LocalWords:  AcpNodeName sourcecode csrattr ecdsaWithSHA sha
LocalWords:  harkins critemplate csrinfo Changelog markdown
LocalWords:  CRITemplateModule ExtensionReq
-->
