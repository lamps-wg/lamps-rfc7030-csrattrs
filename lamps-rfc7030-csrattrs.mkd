---
v: 3

title: Clarification of RFC7030 CSR Attributes definition
abbrev: CSRAttrs
docname: draft-ietf-lamps-rfc7030-csrattrs-05

stand_alone: true

ipr: trust200902
area: Internet
wg: LAMPS Working Group
kw: Internet-Draft
cat: std

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca
  role: editor
- ins: O. Friel
  name: Owen Friel
  org: Cisco
  email: ofriel@cisco.com
- ins: D. von Oheimb
  name: Dr. David von Oheimb
  org: Siemens
  email: dev@ddvo.net
- ins: D. Harkins
  name: Dan Harkins
  org: The Industrial Lounge
  email: dharkins@lounge.org

normative:
  RFC5280:
  RFC7030:
  RFC8994: ACP
  RFC8995: BRSKI

informative:
  RFC8368:

--- abstract

The Enrollment over Secure Transport (EST, RFC7030) is ambiguous in its specification of the CSR Attributes Response. This has resulted in implementation challenges and implementor confusion.

This document updates RFC7030 (EST) and clarifies
how the CSR Attributes Response can be used by an EST server to specify
both CSR attribute OIDs and also CSR attribute values,
in particular X.509 extension values,
that the server expects the client to include in subsequent CSR request.

--- middle

# Introduction

Enrollment over Secure Transport {{RFC7030}} (EST) has been used in a wide variety of applications.
In particular, {{RFC8994}} and {{RFC8995}} describe a way to use it in order to build out an autonomic control plane (ACP) {{RFC8368}}.

The ACP requires that each node be given a very specific subjectAltName.
In the ACP specification, the solution was for the EST server to use
section 2.6 of {{RFC7030}} to convey to the EST client
the actual subjectAltName that will end up in its certificate.

As a result of some implementation challenges, it came to light that this particular way of using the CSR attributes was not universally agreed upon, and it was suggested that it went contrary to section 2.6.

Section 2.6 says that the CSR attributes "can provide additional
descriptive information that the EST server cannot access itself".
This is extended to describe how the EST server can provide values that it demands to use.

After significant discussion, it has been determined that
{{Section 4.5 of RFC7030}} specification is sufficiently difficult
to read and ambiguous to interpret that clarification is needed.

This document motivates the different use cases, and provides additional worked out examples.

Also, section 4.5.2 is extended to clarify the use of the existing ASN.1 syntax.
This covers all uses and is fully backward compatible with existing use.

# Terminology

{::boilerplate bcp14}

# CSR Attributes Handling

## Extensions to RFC 7030 section 2.6.

Replace the second paragraph with the following text:

~~~~
   These attributes can provide additional descriptive information that
   the EST server cannot access itself, such as the Media Access Control
   (MAC) address of an interface of the EST client. The EST server can also
   provide concrete values that it tells the client to include in the CSR,
   such as a specific X.509 Subject Alternative Name extension. Moreover,
   these attributes can indicate the type of the included public key
   or which crypto algorithms to use for the self-signature,
   such as a specific elliptic curve or a specific hash function that the client
   is expected to use when generating the CSR.
~~~~

## Extensions to RFC 7030 section 4.5.2.

The ASN.1 syntax for CSR Attributes as defined in EST section 4.5.2 is as follows:

~~~
   CsrAttrs ::= SEQUENCE SIZE (0..MAX) OF AttrOrOID

   AttrOrOID ::= CHOICE (oid OBJECT IDENTIFIER, attribute Attribute }

   Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
        type   ATTRIBUTE.&id({IOSet}),
        values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type}) }
~~~

This remains unchanged, such that bits-on-the-wire compatibility is maintained.

Key parts that were unclear were which OID to use in the 'type' field and
that the 'values' field can contain an entire sequence of X.509 extensions.

The OID to use for such attributes in the 'type' field MUST be extensionRequest,
which has the numerical value 1.2.840.113549.1.9.14.
There MUST be only one such Attribute.

The 'values' field of this attribute MUST contain a set with exactly one element,
and this element MUST by of type Extensions, as per {{Section 4.1 of RFC5280}}:

~~~
   Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

   Extension  ::=  SEQUENCE  {
        extnID      OBJECT IDENTIFIER,
        critical    BOOLEAN DEFAULT FALSE,
        extnValue   OCTET STRING
                    -- contains the DER encoding of an ASN.1 value
                    -- corresponding to the extension type identified
                    -- by extnID
        }
~~~

An Extension comprises the OID of the specific X.509 extension (extnID),
optionally the 'critical' bit, and the extension value (extnValue).

An Extensions structure, which is a sequence of elements of type Extension,
MUST NOT include more than one element with a particiular extnID.

With this understanding, the needs of {{RFC8994}} and {{RFC8995}} are satisfied
with no change to the bits on the wire.

# Co-existence with existing implementations

# Examples

Each example has a high-level (English) explanation of what is expected.
Some mapping back to the Attribute and Extension definitions above are included.
The base64 DER encoding is then shown.
The output of "dumpasn1" is then provided to detail what the contents are.

## RFC8994/ACP subjectAltName with specific otherName {#acpNodeName}

A single subjectAltName extension is specified in a single Extension attribute.
This is what might be created by an {{RFC8995}} Registrar that is asking for {{RFC8994}} AcpNodeName format otherNames.

### Base64 encoded example

~~~~ base64
{::include examples/realistic-acp.csrattr.b64}
~~~~
{: sourcecode-markers="true" sourcecode-name="realistic-acp.csrattr”}

### ASN.1 DUMP output

There is a single subjectAltName Extension with an Attribute with Extension type.

~~~~
{::include examples/realistic-acp.csrattr.dump}
~~~~

## RFC7030 original example

In this example, taken from {{RFC7030}}, a few different attributes are included.

### Base64 encoded example

~~~~ base64
{::include examples/rfc7030-example01.csrattr.b64}
~~~~
{: sourcecode-markers="true" sourcecode-name="rfc7030-example01.csrattr”}

### ASN.1 DUMP output

1. The challengePassword attribute is included to indicate that the CSR should include this value.

2. An ecPublicKey attribute is provided with the value secp384r1 to indicate what kind of key should be submitted.

3. An extensionRequest container with an OID 1.3.6.1.1.1.1.22 (macAddress), but without a value, to indicate that the CSR should include an X.509v3 extension with this value.

4. The ecdsaWithSHA384 OID is included to indicate what kind of hash is expected to be used for the self-signature of the PCKS#10 CSR structure.

~~~~
{::include examples/rfc7030-example01.csrattr.dump}
~~~~

## EST server requires a specific subjectAltName extension

This example is the same as the previous one except that instead of the OID
for a macAddress, a subjectAltName is specified as the only Extension element.

### Base64 encoded example

~~~~ base64
{::include examples/potato-example.csrattr.b64}
~~~~
{: sourcecode-markers="true" sourcecode-name="rfc7030-example01.csrattr”}

### ASN.1 DUMP output

1. The challengePassword attribute is included to indicate that the CSR should include this value.

2. An ecPublicKey attribute is provided with the value secp384r1 to indicate what kind of key should be submitted.

3. An extensionRequest container with a subjectAltName value containing the name potato@example.com

4. The ecdsaWithSHA384 OID is included to indicate what kind of hash is expected to be used for the self-signature of the PCKS#10 CSR structure.

~~~~
{::include examples/potato-example.csrattr.dump}
~~~~

## Require a public key of a specific size

The CSR requires a public key of a specific size

### Base64 encoded example

~~~~ base64
{::include examples/harkins01.csrattr.b64}
~~~~
{: sourcecode-markers="true" sourcecode-name="harkins01.csrattr”}

### ASN.1 DUMP output

1. Provide a CSR with an RSA key that's 4096 bits and sign it with sha256

~~~~
{::include examples/harkins01.csrattr.dump}
~~~~

## Require a public key of a specific curve

The CSR requires a public key with a specific curve


### Base64 encoded example

~~~~ base64
{::include examples/harkins02.csrattr.b64}
~~~~
{: sourcecode-markers="true" sourcecode-name="harkins02.csrattr”}

### ASN.1 DUMP output

Provide a CSR with an ECC key from p384, include your serial number, and
sign it with sha384.

~~~~
{::include examples/harkins02.csrattr.dump}
~~~~

## Require a specific extension

The CSR is required to have an EC key, to include a serial number,
a friendly name, favorite drink, and be signed with SHA512.

### Base64 encoded example

~~~~ base64
{::include examples/harkins03.csrattr.b64}
~~~~
{: sourcecode-markers="true" sourcecode-name="harkins03.csrattr”}

### ASN.1 DUMP output

Provide a CSR with an EC key from sha521, include your serial number,
friendly name, and favorite drink, and sign it with sha512

~~~~
{::include examples/harkins03.csrattr.dump}
~~~~

# Security Considerations

The security considerations from EST {{RFC7030}} section 6 are unchanged.

## Identity and Privacy Considerations

An EST server may use this mechanism to instruct the EST client about the identities it should include in the CSR it sends as part of enrollment.
The client may only be aware of its IDevID Subject, which includes a manufacturer serial number.
The EST server can use this mechanism to tell the client to include a specific fully qualified domain name in the CSR in order to complete domain ownership proofs required by the CA.
Additionally, the EST server may deem the manufacturer serial number in an IDevID as personally identifiable information, and may want to specify a new random opaque identifier that the pledge should use in its CSR.
This may be desirable if the CA and EST server have different operators.

# IANA Considerations

No requests are made to IANA.

# Acknowledgements

Corey Bonnell crafted example02 using a different tool, and this helped debug other running code.

# Changelog


--- back

